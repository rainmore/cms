apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.kotlin.plugin.spring'
apply plugin: 'org.jetbrains.kotlin.plugin.jpa'
apply plugin: 'org.jetbrains.kotlin.plugin.noarg'
apply plugin: 'org.jetbrains.kotlin.plugin.allopen'
apply plugin: 'org.jetbrains.kotlin.kapt'
apply plugin: 'com.github.hauner.jarTest'
apply plugin: 'idea'

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "11"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "11"
    }
}

configurations {
    all*.exclude group: 'org.apache.logging.log4j'
}

apply from: '../project/assemble.gradle'
apply from: '../project/logging.gradle'


allOpen {
    annotation("javax.persistence.Entity")
    annotation("javax.persistence.MappedSuperclass")
    annotation("javax.persistence.Embeddable")
}

dependencies {
    annotationProcessor libs.hibernate.jpa.api

    // query dsl
    kapt(variantOf(libs.querydsl.apt) { classifier('jpa') })
    api libs.querydsl.jpa

    // The `javax.annotation-api` dependency is (re)declared here as `compileOnly`
    // to allow for annotations that are used in the code generated by QueryDSL.
    compileOnly libs.javax.annotation.api

    implementation libs.bundles.jpa.hibernate

    implementation libs.bundles.kotlin.core
    testImplementation libs.bundles.kotlin.test
}

idea {
    module {
        inheritOutputDirs = false
        def kaptMain = file("$buildDir/classes/kotlin/main")
        sourceDirs += kaptMain
        generatedSourceDirs += kaptMain
        outputDir = kaptMain
    }
}

